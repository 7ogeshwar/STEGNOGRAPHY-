/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package code;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author logig
 */
public class decode extends javax.swing.JFrame {

    BufferedImage Image=null;
    public decode() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonopen = new javax.swing.JButton();
        jButtondecode = new javax.swing.JButton();
        jButtonreset = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabelImage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextmessage = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonopen.setText("open ");
        jButtonopen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonopenActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonopen, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 6, -1, 38));

        jButtondecode.setText("decode");
        jButtondecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtondecodeActionPerformed(evt);
            }
        });
        jPanel1.add(jButtondecode, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 6, -1, 38));

        jButtonreset.setText("reset");
        jButtonreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonresetActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonreset, new org.netbeans.lib.awtextra.AbsoluteConstraints(504, 6, -1, 38));

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("image"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelImage, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 790, -1));

        jTextmessage.setColumns(20);
        jTextmessage.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jTextmessage.setForeground(new java.awt.Color(153, 153, 153));
        jTextmessage.setRows(5);
        jTextmessage.setBorder(javax.swing.BorderFactory.createTitledBorder("decodded message"));
        jScrollPane1.setViewportView(jTextmessage);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private File showFileDialog(final boolean open){
        JFileChooser fc =new JFileChooser("open a image");
        FileFilter filefilter = new FileFilter(){
            @Override
            public boolean accept(File file){
                
          String name = file.getName().toLowerCase();
          
          if (open)
              return file.isDirectory()|| name.endsWith(".jpg")|| name.endsWith(".jpeg")|| name.endsWith(".png")||name.endsWith(".bmg");
          return file.isDirectory() || name .endsWith(".png") ||name.endsWith(".bmg");
          
            }
            @Override
            public String getDescription(){
                if(open)
                    return "Image (*.jpg,*.jpeg,*.png ,*.bmp)";
                return "Image (*.png ,*.bmp)";
            }
        };
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter((javax.swing.filechooser.FileFilter) filefilter);
        
        
        File file =null;
        if(open && fc.showOpenDialog(this) == fc.APPROVE_OPTION)
            file = fc.getSelectedFile();
        else if (!open && fc.showSaveDialog(this) == fc.APPROVE_OPTION)
            file = fc.getSelectedFile();
            return file;
        
    }
    
    
    
    private void jButtonopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonopenActionPerformed
        File file = showFileDialog(true);
     if (file==null)
     {return;


     }
       try {
           Image= ImageIO.read(file);
           jLabelImage.setIcon(new ImageIcon(Image));
           this.validate();
       } catch (IOException ex) {
           ex.printStackTrace();
       }
        
        
    }//GEN-LAST:event_jButtonopenActionPerformed

    private void jButtondecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtondecodeActionPerformed
if(Image  == null){
    JOptionPane.showMessageDialog(this,"First open image");
    return;
}
int len = extractInteger(Image,0,0);
byte b[] =new byte[len];
for(int i =0;i< len ; i++){
    b[i]=(byte) extractByte(Image,i* 8+ 32,0);
     System.out.println("Byte[" + i + "]: " + b[i]);
            }
//jTextmessage.setText(new String(b, StandardCharsets.UTF_8));
//String decodedMessage = new String(b, StandardCharsets.UTF_8);
jTextmessage.setText(new String(b, StandardCharsets.UTF_8));

//jTextmessage.setText(new String (b));
//jTextmessage.setText(decodedMessage);


    

    }//GEN-LAST:event_jButtondecodeActionPerformed

    private void jButtonresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonresetActionPerformed
jTextmessage.setText("");
        Image =null;
        jTextmessage.setText("");
        jLabelImage.setIcon(null);
        
       

        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonresetActionPerformed

    
    
 /*private int extractInteger(BufferedImage img,int start,int storageBit ){
        
         int maxX =img.getWidth(),maxY=img.getHeight(),
                 startX =start/maxY,startY=start-startX*maxY,count =0;
         int length = 0;
         for(int i= startX; i<maxX && count<32;i++){
             for(int j =startY;j<maxY && count<32;j++){
                 int rgb =img.getRGB(i,j),bit =getBitValue(rgb,storageBit);
                 length =setBitValue(length,count,bit);
                 count++;
             }
         }
         return length;
     }*/
    
 
private int extractInteger(BufferedImage img, int start, int storageBit) {
   int maxX = img.getWidth(), maxY = img.getHeight(), 
       startX = start/maxY, startY = start - startX*maxY, count=0;
    int length = 0;
    for(int i=startX; i<maxX && count<32; i++) {
       for(int j=startY; j<maxY && count<32; j++) {
          int rgb = img.getRGB(i, j), bit = getBitValue(rgb, storageBit);
          length = setBitValue(length, count, bit);
          count++;
          }
       }
    return length;
    }     
  /*private int extractByte(BufferedImage img,int start,int storageBit){
      int maxX =img.getWidth(),maxY=img.getHeight(),
                 startX =start/maxY,startY=start-startX*maxY,count =0;
      byte b =0;
       for(int i= startX; i<maxX && count < 8;i++){
             for(int j =startY;j<maxY && count<8;j++){
                 int rgb =img.getRGB(i,j);
                 int bit =getBitValue(rgb,storageBit);
                 b=(byte) setBitValue(b ,count,bit);
                 count++;
             }
         }
      return b & 0xFF ;
         
     }*/
 
private int extractByte(BufferedImage img, int start, int storageBit) {
    int maxX = img.getWidth(), maxY = img.getHeight(), startX = start / maxY, startY = start - startX * maxY, count = 0;
    byte b = 0;
    
    for (int i = startX; i < maxX && count < 8; i++) {
        for (int j = startY; j < maxY && count < 8; j++) {
            int rgb = img.getRGB(i, j);
            int bit = getBitValue(rgb, storageBit);
            b = (byte) setBitValue(b, count, bit);
            count++;
        }
    }

    // Use & 0xFF to convert the byte to an unsigned integer
    return b & 0xFF ;
}
/*private byte extractByte(BufferedImage img, int start, int storageBit) {
    int maxX = img.getWidth(), maxY = img.getHeight(), 
       startX = start / maxY, startY = start - startX*maxY, count=0;
    byte b = 0;
    for(int i=startX; i<maxX && count<8; i++) {
       for(int j=startY; j<maxY && count<8; j++) {
          int rgb = img.getRGB(i, j), bit = getBitValue(rgb, storageBit);
          b = (byte)setBitValue(b, count, bit);
          count++;
          }
       }
    return b;
    }*/


    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(decode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(decode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(decode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(decode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new decode().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtondecode;
    private javax.swing.JButton jButtonopen;
    private javax.swing.JButton jButtonreset;
    private javax.swing.JLabel jLabelImage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextmessage;
    // End of variables declaration//GEN-END:variables

    private int getBitValue (int n, int location){
       int v= (int ) (n &Math.round(Math.pow(2,location)));
       
       return v == 0?0:1;
   }
   
   
   
   private int setBitValue (int n, int location ,int bit){
       
       
       int toggle =(int) Math.pow(2,location),bv =getBitValue(n,location);
       if(bv == bit)
           return n;
       if(bv == 0 && bit ==1)
           n |=toggle;
       else if (bv ==1 && bit == 0)
           n ^=toggle;
       return n;
   }

    void setLocationRelativetTo(Object object) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
